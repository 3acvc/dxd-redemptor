#
# DXD Circulating Supply Snapshot
#
type SubgraphStatus @entity {
    "SubgraphStatus"
    id: ID!
    isInitialized: Boolean!
    lastSnapshotBlock: BigInt!
}

#
# DXD Circulating Supply Snapshot
#
type DXDCirculatingSupplySnapshot @entity {
    " Block number in which the snapshot was taken "
    id: ID!
    " Supply of DXD tokens "
    totalSupply: BigDecimal!
    "circulatingSupply = totalSupply - lockedSupply"
    circulatingSupply: BigDecimal!
}

#
# Provides information about an ERC20 token
#
type Token @entity {
    " Token address "
    id: ID!
    " Number of decimals the token uses "
    decimals: Int!
    " Human-readable name of the token "
    name: String!
    " Symbol of the token "
    symbol: String!
}

#
# Token events
#
interface TokenEvent {
    id: ID!
    token: Token!
    amount: BigDecimal!
    sender: Bytes!
    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes!
}

#
# Token events
#
type TokenBalance @entity {
    id: ID!
    token: Token!
    " Account address "
    address: Bytes!
    amount: BigDecimal!
    snapshot: TreasuryBalancesSnapshot!
}

type TreasuryBalancesSnapshot @entity {
    id: ID!
    blockNumber: BigInt!
    " Token balances in this snapshot "
    balances: [TokenBalance!]! @derivedFrom(field: "snapshot")
}

type TransferEvent implements TokenEvent @entity {
    id: ID!
    " Token address "
    token: Token!
    " Quantity of tokens transferred "
    amount: BigDecimal!
    " Transaction sender address "
    sender: Bytes!
    " Address of source account "
    source: Bytes!
    " Address of destination account "
    destination: Bytes!
    " Block number "
    block: BigInt!
    " Event timestamp "
    timestamp: BigInt!
    " Transaction hash "
    transaction: Bytes!
}
