#
# DXD Circulating Supply Snapshot
#
type SubgraphStatus @entity {
    "SubgraphStatus"
    id: ID!
    isInitialized: Boolean!
}

#
# DXD Circulating Supply Snapshot
#
type DXDCirculatingSupplySnapshot @entity {
    " Block number in which the snapshot was taken "
    id: ID!
    " Supply of DXD tokens "
    totalSupply: BigInt!
    "circulatingSupply = totalSupply - lockedSupply"
    circulatingSupply: BigInt!
}

#
# Provides information about an ERC20 token
#
type Token @entity {
    id: ID!
    " Token address "
    address: Bytes!
    " Number of decimals the token uses "
    decimals: Int!
    " Human-readable name of the token "
    name: String!
    " Symbol of the token "
    symbol: String!
}

#
# Token events
#
interface TokenEvent {
    id: ID!
    token: Token!
    amount: BigDecimal!
    sender: Bytes!

    block: BigInt!
    timestamp: BigInt!
    transaction: Bytes!
}

type BurnEvent implements TokenEvent @entity {
    id: ID!

    " Token address "
    token: Token!

    " Quantity of tokens burned "
    amount: BigDecimal!

    " Transaction sender address "
    sender: Bytes!

    " Address of burner account "
    burner: Bytes!

    " Block number "
    block: BigInt!

    " Event timestamp "
    timestamp: BigInt!

    " Transaction hash "
    transaction: Bytes!
}

type MintEvent implements TokenEvent @entity {
    id: ID!

    " Token address "
    token: Token!

    " Quantity of tokens minted "
    amount: BigDecimal!

    " Transaction sender address "
    sender: Bytes!

    " Address of minter account "
    minter: Bytes!

    " Address of destination account "
    destination: Bytes!

    " Block number "
    block: BigInt!

    " Event timestamp "
    timestamp: BigInt!

    " Transaction hash "
    transaction: Bytes!
}

type TransferEvent implements TokenEvent @entity {
    id: ID!

    " Token address "
    token: Token!

    " Quantity of tokens transferred "
    amount: BigDecimal!

    " Transaction sender address "
    sender: Bytes!

    " Address of source account "
    source: Bytes!

    " Address of destination account "
    destination: Bytes!

    " Block number "
    block: BigInt!

    " Event timestamp "
    timestamp: BigInt!

    " Transaction hash "
    transaction: Bytes!
}
